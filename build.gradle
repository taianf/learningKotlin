buildscript {
    repositories {
        google()
        gradlePluginPortal()
        jcenter()
        mavenCentral()
        maven { url 'https://kotlin.bintray.com/kotlinx' }
        maven { url 'https://kotlin.bintray.com/ktor' }
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    }
    dependencies {
        classpath "com.google.cloud.tools:appengine-gradle-plugin:$appengine_plugin_version"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-serialization:$kotlin_version"
    }
}

apply plugin: 'application'
apply plugin: 'com.google.cloud.tools.appengine'
apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'kotlinx-serialization'
apply plugin: 'war'

appengine.deploy.projectId = 'GCLOUD_CONFIG'
appengine.deploy.version = 'GCLOUD_CONFIG'

mainClassName = "io.ktor.server.netty.EngineMain"

sourceSets {
    main.kotlin.srcDirs = ['src/main/kotlin']
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    google()
    gradlePluginPortal()
    jcenter()
    mavenCentral()
    maven { url 'https://kotlin.bintray.com/kotlinx' }
    maven { url 'https://kotlin.bintray.com/ktor' }
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
}

dependencies {
    implementation "com.google.appengine:appengine:$appengine_version"
    implementation "com.google.cloud:google-cloud-logging-logback:$gce_logback_version"
    implementation "io.ktor:ktor-html-builder:$ktor_version"
    implementation "io.ktor:ktor-locations:$ktor_version"
    implementation "io.ktor:ktor-metrics:$ktor_version"
    implementation "io.ktor:ktor-serialization:$ktor_version"
    implementation "io.ktor:ktor-server-core:$ktor_version"
    implementation "io.ktor:ktor-server-host-common:$ktor_version"
    implementation "io.ktor:ktor-server-netty:$ktor_version"
    implementation "io.ktor:ktor-server-servlet:$ktor_version"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:$kotlin_serialization"
    implementation 'com.google.appengine:appengine-api-1.0-sdk:+'
    implementation 'com.google.cloud:google-cloud:+'
    implementation 'jstl:jstl:1.2'
    providedCompile 'javax.servlet:javax.servlet-api:3.1.0'
    testImplementation "ch.qos.logback:logback-classic:$logback_version"
    testImplementation "io.ktor:ktor-server-tests:$ktor_version"
    testImplementation 'com.google.appengine:appengine-api-stubs:+'
    testImplementation 'com.google.appengine:appengine-testing:+'
    testImplementation 'com.google.appengine:appengine-tools-sdk:+'
    testImplementation 'com.google.truth:truth:0.33'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.4.2'
    testImplementation 'org.mockito:mockito-all:1.10.19'
}

appengineDeploy.dependsOn test
appengineStage.dependsOn test

appengine {
    deploy {
        projectId = 'GCLOUD_CONFIG'
        version = 'GCLOUD_CONFIG'
    }
    run {
        jvmFlags = ['-Xdebug', '-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005']
        automaticRestart = true
    }
}

test {
    useJUnit()
    testLogging.showStandardStreams = true
    afterTest { final descriptor, final result ->
        logger.lifecycle("" + descriptor + ": " + result)
    }
}
